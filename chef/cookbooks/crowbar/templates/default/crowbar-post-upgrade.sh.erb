#!/bin/bash
#
# This does what is necessary directly after upgraded node is rebooted

LOGFILE=/var/log/crowbar/node-upgrade.log
UPGRADEDIR=/var/lib/crowbar/upgrade
mkdir -p "`dirname "$LOGFILE"`"
exec >>"$LOGFILE" 2>&1

log()
{
    set +x
    echo "[$(date --iso-8601=ns)] [$$] $@"
    set -x
}

log "Executing $BASH_SOURCE"

set -x

mkdir -p $UPGRADEDIR
rm -f $UPGRADEDIR/crowbar-post-upgrade-failed

if [[ -f $UPGRADEDIR/crowbar-post-upgrade-ok ]] ; then
    log "Post upgrade actions were already successfully executed"
    exit 0
fi

<% if @use_ha %>

<% if @has_drbd %>

if [[ -f /sbin/drbdadm ]] ; then
    log "Recreating DRBD metadata after the upgrade to new DRBD version..."

    # FIXME: workaround for bnc#1006105 : creating metatata works after 2nd run...
    for i in 1 2; do
        log "Recreating DRBD metadata, attempt no. $i"
        drbdadm -- --force create-md all

        ret=$?
        if [ $ret != 0 ] ; then
            log "Error occured during DRBD metadata upgrade"
            echo $ret > $UPGRADEDIR/crowbar-post-upgrade-failed
            exit $ret
        fi

        sleep 5
    done
fi

# Starting pacemaker will cause DRBD service to start and synchronize with the other node
log "Starting pacemaker..."
service pacemaker start

ret=$?
if [ $ret != 0 ] ; then
    log "Error occured during starting pacemaker service"
    echo $ret > $UPGRADEDIR/crowbar-post-upgrade-failed
    exit $ret
fi

if [[ -f /sbin/drbdadm ]] ; then
    # Wait until DRBD is started
    # Initially, 'drbdadm status' returns just empty string so let's get pass this stage.
    while [[ $(drbdadm status | wc -c) -eq 0 ]]; do
        log "Waiting for DRBD to bring the devices up..."
        sleep 1
    done
    log "DRBD is up: `drbdadm status`"

    # Wait for replication to start
    # 'drbdadm status' could look like:
    # postgresql role:Secondary
    #  disk:Inconsistent
    #    d52-54-77-77-01-01 connection:Connecting
    while ! drbdadm status | grep -qi replication; do
        log "Replication did not start yet: `drbdadm status`"
        sleep 1
    done
    log "Replication started: `drbdadm status`"

    # Now wait after DRBD data are synced with the other node
    # While replicating, 'drbdadm status' looks like
    # postgresql role:Secondary
    #  disk:Inconsistent
    #    d52-54-77-77-01-01 role:Primary
    #      replication:SyncTarget peer-disk:UpToDate done:0.08
    while drbdadm status | grep -qi -e inconsistent -e replication; do
        log "Replication status: `drbdadm status`"
        sleep 10
    done
    log "Replication done: `drbdadm status`"
fi

<% end %>

<% else %>

log "No HA setup found..."

<% end %>

touch $UPGRADEDIR/crowbar-post-upgrade-ok
log "$BASH_SOURCE is finished."
