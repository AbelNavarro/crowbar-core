#!/usr/bin/env ruby
#
# Copyright 2011-2013, Dell
# Copyright 2013-2015, SUSE Linux GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require File.join(File.expand_path(File.dirname(__FILE__)), "barclamp_lib")
@barclamp = "network"

@commands["deallocate_virtual_ip"] = [
  "deallocate_ip(ARGV.shift,ARGV.shift,ARGV.shift,:service)",
  "deallocate_virtual_ip <name> <service> <network> - Deallocate an ip from a service on a network"
]

@commands["allocate_virtual_ip"] = [
  "allocate_ip(ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,:service)",
  "allocate_virtual_ip <name> <service> <network> <range> [<suggestion>] - Allocate an ip for a service on a network from a range"
]

@commands["deallocate_ip"] = [
  "deallocate_ip(ARGV.shift,ARGV.shift,ARGV.shift,:node)",
  "deallocate_ip <name> <node> <network> - Deallocate an ip from a node on a network"
]

@commands["allocate_ip"] = [
  "allocate_ip(ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,:node)",
  "allocate_ip <name> <node> <network> <range> [<suggestion>] - Allocate an ip for a node on a network from a range"
]

@commands["enable_interface"] = [
  "enable_interface(ARGV.shift,ARGV.shift,ARGV.shift)",
  "enable_interface <name> <node> <network> - Ensure that an interface is present for the specified network"
]

@commands["disable_interface"] = [
  "disable_interface(ARGV.shift,ARGV.shift,ARGV.shift)",
  "disable_interface <name> <node> <network> - Ensure that an interface is not enabled for the specified network"
]

alias :super_run_sub_command :run_sub_command

def run_sub_command(cmds, subcmd)
  if [
    "enable_interface",
    "disable_interface",
    "deallocate_virtual_ip",
    "allocate_virtual_ip",
    "deallocate_ip",
    "allocate_ip"
  ].include?(subcmd)
    case subcmd
    when "enable_interface"
      usage(-2) unless ARGV.length == 3

      res = deprecated_exec(
        "network",
        "interface",
        "enable",
        ARGV.shift,
        ARGV.shift,
        ARGV.shift
      )
    when "disable_interface"
      usage(-2) unless ARGV.length == 3

      res = deprecated_exec(
        "network",
        "interface",
        "disable",
        ARGV.shift,
        ARGV.shift,
        ARGV.shift
      )
    when "deallocate_virtual_ip"
      usage(-2) unless ARGV.length == 3

      res = deprecated_exec(
        "network",
        "virtualip",
        "deallocate",
        ARGV.shift,
        ARGV.shift,
        ARGV.shift
      )
    when "allocate_virtual_ip"
      usage(-2) if ARGV.length < 4 || ARGV.length > 5

      res = deprecated_exec(
        "network",
        "virtualip",
        "allocate",
        ARGV.shift,
        ARGV.shift,
        ARGV.shift,
        ARGV.shift,
        ARGV.shift
      )
    when "deallocate_ip"
      usage(-2) unless ARGV.length == 3

      res = deprecated_exec(
        "network",
        "hostip",
        "deallocate",
        ARGV.shift,
        ARGV.shift,
        ARGV.shift
      )
    when "allocate_ip"
      usage(-2) if ARGV.length < 4 || ARGV.length > 5

      res = deprecated_exec(
        "network",
        "hostip",
        "allocate",
        ARGV.shift,
        ARGV.shift,
        ARGV.shift,
        ARGV.shift,
        ARGV.shift
      )
    end

    return [
      "",
      res || 1
    ]
  end

  super_run_sub_command(cmds, subcmd)
end

main
