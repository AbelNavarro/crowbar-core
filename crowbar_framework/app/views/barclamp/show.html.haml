- prop = "#{@role.barclamp}_#{@role.inst}"
%p{:style => 'float:right'}
  = link_to t('.edit'), "/crowbar/#{@role.barclamp}/1.0/proposals/#{@role.inst}", :class => 'button'

%h1.led.unknown{:id => prop, :title=>t('proposal.status.unknown')}
  = link_to "#{@role.barclamp.titlecase}: #{@role.inst.titlecase}", barclamp_modules_path(:id=>@role.barclamp)

.box
  %h2= t '.attributes'

  =(@attr_raw ? (render :partial => 'barclamp/show_attributes_raw') : (begin render :partial => "barclamp/#{@role.barclamp}/show_attributes" rescue (render :partial => 'barclamp/show_attributes_raw') end))

.box
  %h2= t '.deployment'
  =(@attr_raw ? (render :partial => 'barclamp/show_deployment_raw') : (begin render :partial => "barclamp/#{@role.barclamp}/show_deployment" rescue (render :partial => 'barclamp/show_deployment_raw') end))
  
%p
  =link_to t('.edit'), "/crowbar/#{@role.barclamp}/1.0/proposals/#{@role.inst}", :class => 'button'
  
  
:javascript

  function update() {
    $.ajaxSetup({ timeout: 3000 })
    $.getJSON('#{status_proposals_barclamp_path(:id=>prop)}', function(data) {
      // Update proposals status
      $.each(data['proposals'], function(key,val) {
        var el = $('#'+key);
        if(el.hasClass("unknown")) {
          led_update(el, key, val);
        } else {
          led_update(el, key, val, function(){ el.effect("highlight", {color: '#666666'}, 2000); });
        }
      });
    });
  }

  function led_update(td, key, val, callback) {
    if(!td.hasClass(val)){
      td.attr('class', val+' led').attr('title', val);
      if(typeof callback == 'function'){
        callback.call();
      }
    };
  }

  jQuery(document).ready(function($) {
    update();
  });
