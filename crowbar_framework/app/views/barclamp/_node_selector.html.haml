-if request.env['HTTP_USER_AGENT'].downcase =~ /msie ([1-8])/
  %p
    %em= t('.msie_fail')
  = render :partial => 'barclamp/edit_deployment_raw'
  -if RAILS_ENV === "development"
    %p
      = "DEBUG HTTP USER AGENT: #{request.env['HTTP_USER_AGENT']}"
-else 
  %input#proposal_development{:type => "hidden", :name => "proposal_deployment", :value => @proposal.raw_data['deployment'][@proposal.barclamp].to_json }
  %h2= t('.title')
  = link_to t('raw'), proposal_barclamp_path(:id => @proposal.name, :controller => @proposal.barclamp, :dep_raw => true, :attr_raw => @attr_raw), :style => "float: right;"
  %div.container#deploy
    %p
      %em#hint= t('.hint')
    .column_40.first
      %div#nodes_div
        %div.title
          %b= link_to t('barclamp.proposal_show.available_nodes'), dashboard_path
        %ul 
          - NodeObject.all.each do |n|
            %li
              %a.available{:href => 'javascript:void(0);', :class =>"draggable_a",  :id => n.name, :title =>(n.description || t('not_set')), :draggable=>'true'  }= n.shortname
            
    .column_50.last
      - @proposal.all_elements.each do |element|
        %div
          %div.droptarget{ :id=>element, :draggable=>'true'}
            - if CONVERGED_ADMIN
              %b= link_to element.humanize, "http://#{request.host}:4040/roles/#{element}", :target => '_blank'
            - else
              %b= element.humanize
            %img{ :src=>'/images/icons/server_add.png', :title=>t('.add') }
          %ul.ddlist{ :id=>element }

.clear

:javascript

$(document).ready(function() {

  DragDropHelpers.fixVisualCues=true;

  var i18n_remove = $.localizedValue('#{t('.remove')}');
  var i18n_no_dup = $.localizedValue("#{t('.no_dup')}");
  var i18n_added = $.localizedValue("#{t('.added')}");
  var i18n_removed = $.localizedValue('#{t('.removed')}');
  var i18n_error = $.localizedValue('#{t('.error')}');
  var i18n_constraint_max = $.localizedValue('#{t('.constraint_max')}');
  var i18n_constraint_unique = $.localizedValue('#{t('.constraint_unique')}');
  var json = JSON.parse(document.getElementById('proposal_development').value);
    
  // this populates the current deployment from the given data
  $('#deploy div.droptarget[draggable="true"]').each(function() {
    var element = $(this).attr('id');
    $.each(json['elements'][element], function(index, node) {
      make_allocated(node, element);
    });
  });
  
  // set draggable attributes
  $('#deploy a.available[draggable="true"]')
    .bind('dragend', function( ev ) {
      false;
    })
    .bind('dragstart', function( ev ) {
      // console.debug("dragging " + ev.target.id);
      var dt = ev.originalEvent.dataTransfer;
      // TODO make sure only a available set this!
      dt.setData("Text", ev.target.id);
    });

  // set droppable attributes
  $('#deploy div.droptarget[draggable="true"]')
    // Decide whether the thing dragged in is welcome.
    .bind('dragover', function(ev) {
        if (ev.preventDefault) ev.preventDefault(); // allows us to drop
        return false;
    })

    // Handle the final drop...
    .bind('drop', function(ev) {
      if (ev.preventDefault) ev.preventDefault(); // allows us to drop
      var drag_from = ev.originalEvent.dataTransfer.getData("Text");      
      if (drag_from) {
        var list = $(this).attr('id');
        if ($('ul.ddlist[id="'+list+'"]').children('a[id="'+drag_from+'"]').length==0) {
        //  console.debug("from " + drag_from + " to " + list);
          drop_item(drag_from, list);
          drag_from = null;
          return true;
        } else {
          console.info("duplicate name " + drag_from + " in list " + list);
          // TODO - tell user no_dup
        }
      } else {
        console.warn("cannot drop - missing drag_from");
        return false;
      }
    });
}
 
  // called when an available node is dropped into the list
  function drop_item(name, list) {
    var $node = $('li.allocated[id="'+name+'"]');
    if ($node) {
     // console.debug("dropped " + $node.attr('id') + " from " + list);
      if (json['elements'][list] == undefined) {
        json['elements'][list] = new Array();
      }
      json['elements'][list].push(name);
      update_json();
      make_allocated(name, list);
      //TODO $('#hint').text(i18n_msg(i18n_added, name, list));
    }
  }
  
  // substitutions for i18n strings
  function i18n_msg(msg, node, list,error) {
    msg = msg.replace('[0]', node);
    msg = msg.replace('[1]', list);
    msg = msg.replace('[2]', error);
    return msg;
  }
  
  // responds to the remove button
  function remove_item(name, list) {
    var nodes = json['elements'][list];
    var idx = jQuery.inArray(name, nodes);  // Find the index
    if (idx!=-1) nodes.splice(idx, 1);    // Remove it!
    json['elements'][list] = nodes;       // update the corrected list
    update_json();
    $('ul.ddlist[id="'+list+'"]').children('li[id="'+name+'"]').remove();
   // console.debug("removed " + name + " from " + list);
    //TODO $('#hint').replaceWith(i18n_msg(i18n_removed, name, list));
  }
  
  // call after updates to change the values
  function update_json() {
    input = document.getElementById('proposal_development')
    input.value = JSON.stringify(json);
    // console.debug("json:" + document.getElementById('proposal_development').value);
  }
  
  // creates the LI HTML and adds it to the list
  function make_allocated(item, list) {
    try {
      var $list = $('ul.ddlist[id="'+list+'"]');
      if ($list.children('li[id="'+item+'"]').length == 0) {
        var title = $('a.available[id="'+item+'"]').attr('title');
        var shortname = item.split('.')[0];
        var ll = "<li class='allocated' id='"+ item + "' title='"+ title + "'>"+shortname;
        ll = ll + "<img src='/images/icons/server_delete.png' style='float:right' title='" + i18n_remove + "' onclick='remove_item(\""+item+"\",\""+list+"\");'>";
        ll = ll + "</li>";
        $list.append(ll);
        //console.debug("make li " + shortname + " for " + $list.attr('id') + "(children-" + $list.children().length + ") li=" + ll);
      } else {
        // console.debug("cannot add - " + item + " because it exists in the list");
      }
    } catch(err) {
      //TODO add error 
      //console.warn("Could not create li for " + name + " in list " + list + " due to " + err);
    }
  }
  
  function node_selector(base_item, constraints){
    // TODO - FIX CONSTRAINTS
    if (false) {
        // Possible param $item_instance, $old_container, $new_container, event, helper
        var $target = $(e.target);
        var tid = $target.attr('id').replace("_div", "");
        if (tid != "nodes") {
          var found = false;
          var ul = $target.find('ul');
          var c = constraints[tid];
          ul.children().each(function(){
            if ($(this).attr('name') == $item.attr('name')) found = true; 
          });
          if (c["unique"]) {
            $.each(constraints, function(key, value) {
              $("#"+key).children().each(function(){
                if ($(this).attr('name') == $item.attr('name')) found = true;
              });
            });
          }
          if (!found && (c["count"] == -1 || c["count"] > ul.children().size())) {
            copy_item($item, tid);
            ul.append($.fn.drag_drop_multi_select_clone($item));
          }
        }
        else {
          if ($item.parent().parent().attr('id') != $target.attr('id')) {
            //remove_item($item);
            $item.remove();
          }
        }
    };
  }

