.column_100
  - unless @nodes.empty?
    %section.box#details
      - if @node
        = render :partial => 'show'
      - else
        %p= t("status_empty", :scope=>"nodes.index") % @nodes.count

#nodes
  - if @nodes.nil?
    = t('no_items')
  - else
    - @nodes.group_by(&:switch_name).each_with_index do |switch, i|
      .column_25{:class => column_class(i,4)}
        %table.data.box{:id => "switch_#{switch[0].parameterize}"}
          %thead
            %tr
              %th.status{:title => t('updating')}
                - status = NodeObject.status(switch[1])
                .inline_piechart= [status["ready"], status["failed"], status["unknown"], status["unready"]+status["pending"]] * ","
              %th= switch[0] == -1 ? 'Unknown' : switch[0]
  
          %tbody
            - switch[1].sort_by{|n| n.location.to_i }.each do |node|
              %tr{ :class => ["node", cycle(:odd, :even, :name => "nodes_#{i}")], :id => node.shortname }
                %td.status{:raw=> node.state}
                  .led{:class => node.status, :title=>t("state.#{node.state}")}
                %td.name
                  %a{:href => node_path(node.shortname), :title=> "#{NodeObject.human_attribute_name :description}: #{(node.nil? ? t(:not_set) : node.description)}", :class => 'node_details', :id => node.shortname.parameterize}= node.shortname
  
.clear

:javascript
  racks = {};
  selected = '#{session[:node]}';
  function update() {
    $.ajaxSetup({ timeout: 3000 })
    $.getJSON('#{nodes_status_path}', function(data) {
      
      // reload path
      var repath = '#{dashboard_path}/'+selected;
      
      // If node count has changed, re-render the page
      var current_nodes = $('.node').length;
      if(data['count'] != current_nodes) {
        location.href = repath;
      }

      // If node name sum has changed, re-render the page
      if(data['sum'] != #{@sum}) {
        location.href = repath;
      }
      
      // Update switch-level piecharts
      $.each(data['switches'], function(key,val) {
        var values = val['ready'] + ', ' + val['failed'] + ', ' + val['unknown'] + ', ' + (val['building']+val['unready']+val['pending']);
        var total = val['ready']+val['unready']+val['unknown']+val['building']+val['pending']+val['failed'];
        if (racks[key]==undefined) { 
          racks[key] = total; 
        } else if (racks[key]!=total) {
          location.href =repath;
        }
        $('#switch_'+key.toLowerCase()+' th.status .inline_piechart').html(values).sparkline('html', piechart_options );
        var status = "#{t :status_pie, :scope=>'nodes.index'}";
        status = status.replace("{0}", total);
        status = status.replace("{1}", val['ready']);
        status = status.replace("{2}", val['failed']);
        status = status.replace("{3}", val['unknown']);
        status = status.replace("{4}", (val['unready']+val['pending']+val['building']));
        $('#switch_'+key.toLowerCase()+' th.status').attr('title', status)
      });
      
      // Update nodes
      $.each(data['nodes'], function(key,val) {
        var td = $('#'+key+' td.status');
        var led = td.children('.led');
        if(!(td.attr('raw') === val['raw'])) {
          led.destroy();
          led.attr('class', 'led '+val['status']);
          td.attr('raw', val['raw']);
          td.effect("highlight", {color: '#666666'}, 2000);
          led.attr('title', val['state']);
        }
        // catch the case where we've expanded detail on a node
        s = $('div.container dd.node_state');
        h_key = "head_"+key;
        h = $('div.container div.led[id="'+h_key+'"]');
        if (h.attr('id')==h_key && s.text()!=val['state']) {
          s.text(val['state']);
          s.effect("highlight", {color: '#666666'}, 2000);
          s.attr('title','#{t('raw')}: '+val['raw']);
          var head = $('#head_'+key);
          if (head.length !=0 ) {
            head.destroy();
            head.attr('class', 'led '+val['status']);
            head.attr('title', val['state']);
          }
        }
      });
      
    });
  }
